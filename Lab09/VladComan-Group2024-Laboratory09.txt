/*Write a Java application which contains a class which implements 
the Runnable interface. The class' constructor sets the name of the 
instantiated object. Also, there is a class variable which counts the 
number of instantiated objects from that class. The run( ) method of 
the class will print out the object's name for a number of times equal 
to the counter's value and delayed by 1000 msec. From a separate class, 
create multiple threads build from separate objects of the previously 
described class. Analyze the results.
Vlad Coman, Group 2024
08.05.2020
 * */
package homework;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;

class MyRunnable implements Runnable{
	private String name;
	private static int count;
	MyRunnable(){
		super();
		count++;
	}
	MyRunnable(String name){
		this.name=name;
		count++;
	}
	@Override
	public void run() {
		for(int i=0;i<count;i++) {
		System.out.println(name);
		try {
			TimeUnit.SECONDS.sleep(1);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		}
	}
	
}
public class homework {//Asynchronous
	private Scanner cin=new Scanner(System.in);
	public static void main (String[] args) {
		Thread thread1=new Thread(new MyRunnable("Thread_name1"));
		Thread thread2=new Thread(new MyRunnable("Thread_name2"));
		Thread thread3=new Thread(new MyRunnable("Thread_name3"));
		thread1.start();
		thread2.start();
		thread3.start();
	}
}


/*Write a Java application with a thread that generates 30 random numbers 
between 0 and 30. Another thread displays the area of the circles having 
as radiuses the values divisible by 3 generated by the first thread. 
Vlad Coman, Group 2024
08.05.2020
 * */
package homework;
class MyRandom implements Runnable {
	public double arr[];

	MyRandom() {
		arr = new double[30];
		for (int i = 0; i < arr.length; i++)
			arr[i] = Math.random() * 30;
	}

	@Override
	public void run() {
		for (int i = 0; i < arr.length; i++)
			arr[i] = Math.random() * 30;
		System.out.println("The random numbers are: ");
		for (int i = 0; i < arr.length; i++)
			System.out.println(arr[i]);
	}
}

class Circle implements Runnable {
	MyRandom ob = new MyRandom();

	Circle(MyRandom ob) {
		this.ob=ob;
	}

	@Override()
	public void run() {
		for (int i = 0; i < ob.arr.length; i++)
			if (ob.arr[i] % 3 == 0)
				System.out.println("The area is: " + (Math.PI * Math.pow(ob.arr[i], 2)));
	}
}

public class homework {
	public static void main(String args[]) {
		Thread thread1 = new Thread(new MyRandom());
		Thread thread2 = new Thread(new Circle(new MyRandom()));
		thread1.run();
		thread2.run();
	}
}

/* Write a class for determining a certain value from Fibonacciâ€™s array. The class has 2 methods, one for calculating and the other for displaying the desired value. 
Use a synchronized multithreading mechanism in which one process displays all the Fibonacci numbers smaller than the desired value computed by the other process.
Vlad Coman, Group 2024
05.10.2020
*/
import java.util.Scanner;
import java.io.*;

class Fibonacci {

	int calc(int n) {
		int a = 0, b=1, ans=1;
		if (n == 0)
			ans = -1;
		else if (n == 1)
			ans = 0;
		else if (n == 2)
			ans = 1;
		for (int i = 2; i < n; i++) {
			ans = a + b;
			a = b;
			b = ans;
		}
		return ans;
	}

	synchronized void show(int val) {
		System.out.print(val + " ");
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			System.out.println("Interruption");
		}

	}
}

class MyRunnable implements Runnable {
	Fibonacci ob;
	int x;
	Thread thread;

	public MyRunnable(Fibonacci ob1, int y) {
		ob = ob1;
		x = y;
		thread = new Thread(this);
		thread.start();
	}

	@Override
	public void run() {
		for (int i = 1; i < x; i++) {
			ob.show(ob.calc(i));
		}
	}

}

class C implements Runnable {
	Fibonacci ob;
	int x;
	Thread thread;

	public Calculare(Fibonacci ob1, int y) {
		ob = ob1;
		x = y;
		thread = new Thread(this);
		thread.start();
	}

	@Override
	public void run() {
		ob.show(ob.calc(x));

	}

}

public class Homework {
	public static void main(String args[]) throws InterruptedException {
		Scanner cin = new Scanner(System.in);
		Fibonacci ob1 = new Fibonacci();
		int nr;
		System.out.println("Which termen?");
		nr = cin.nextInt();
		MyRunnable f = new MyRunnable(ob1, nr);
		f.t.join();
		Calculare val = new Calculare(ob1, nr);
		val.t.join();
	}
}

/*Write a Java app which uses the synchronized method acces for mutual exclusion. Create 3 separate threads which simultaneously call methods to increment and decrement a separate class' class variable. 
Check if the results are what you expect them to be. Remove the synchronized blocks and reevaluate the results.
Vlad Coman, Group 2024
05.10.2020*/
import java.util.Scanner;
import java.io.*;

class Check {
	private static int value;

	Check(int value) {
		this.value = value;
	}

	int getValue() {
		return value;
	}

	synchronized public void add() {
		value++;
	}

	synchronized public void sub() {
		value--;
	}
}

class MyRunnable implements Runnable {
	Check val;

	MyRunnable(Check val) {
		this.val=val;
	}

	@Override
	public void run() {
		val.add();
		System.out.println("Addition: " + val.getValue());
		val.sub();
		System.out.println("Substraction " + val.getValue());

	}
}

public class Homework {
	public static void main(String args[]) {
		Scanner cin = new Scanner(System.in);
		int nr;
		System.out.print("Introduce the number you want to test: ");
		nr = cin.nextInt();
		MyThread t1 = new MyRunnable(new Check(nr));
		MyThread t2 = new MyRunnable(new Check(nr));
		MyThread t3 = new MyRunnable(new Check(nr));
		t1.start();
		t2.start();
		t3.start();
	}
}

/*Write a Java app which computes the greatest common divisor for large numbers (>100.000). The app will continuosly read from the keyboard pairs of numbers and launch threads for each of the pairs.
The results will be displayed in the console as soon as they are available.
Vlad Coman, Group 2024
05.10.2020*/
import java.util.Scanner;
import java.io.*;

class GCD {
	private int x,y;
	GCD() {
		x = 0;
		y = 0;
	}
	GCD(int x, int y) {
		this.x = x;
		this.y = y;
	}

	int div() {
		while(x!=y){
		if (x >= y)
			x-=y;
		if (x < y)
			y-=x;
	}
		return x;
	}

	synchronized void afis(int x) {
		System.out.println("The Greatest Common Divider is: " + x);
	}
}

class MyThread implements Runnable {
	GCD ob;
	Thread thread;

	MyThread(int x, int y) {
		ob = new Div(x, y);
		thread = new Thread(this);
		thread.start();
	}

	@Override
	public void run() {
		ob.afis(ob.div());
	}
}

public class Homework {
	public static void main(String args[]) throws InterruptedException {
		Scanner cin = new Scanner(System.in);
		int x, y;
		String str = NULL;
		while (str.compareTo("A") != 0) {
			System.out.println("Introduce two numbers greater than 100000:");
			System.out.println("Introduce x: ");
			x = cin.nextInt();
			System.out.println("Introduce y: ");
			y = cin.nextInt();
			assert (x > 100000 && y > 100000) : "Not large enough!";
			MyThread test = new MyThread(x, y);
			test.t.join();
			System.out.print("Introduce another pair or press A to stop");
			str = cin.next();
		}
	}
}