/* Write an application which checks if 3 random points form an 
obtuse triangle. If the condition is not met, a specific exception 
is thrown: AcuteTriangle, RightTriangle. If the 3 points are on
the same line or if the segments determined by the 3 points cannot make 
up a triangle, throw an ImpossibleTriangle exception, and within the 
corresponding catch block print a warning and throw a RuntimeException.
Vlad Coman, Group 2024
18.04.2020
*/
package labwork5;
import java.util.Scanner;
import java.lang.Math;
class Point{
	private double x, y;
	Point(){
		this.x=0;
		this.y=0;
	}
	Point(double x, double y){
		this.x=x;
		this.y=y;
	}
	public void setX(double x) {
		this.x=x;
	}
	public double getX() {
		return x;
	}
	public void setY(double y) {
		this.y=y;
	}
	public double getY() {
		return y;
	}
	public double getDistance(Point ob2) {
		double distance;
		distance=Math.sqrt(Math.pow(ob2.x-this.x,2)+Math.pow(ob2.y-this.y, 2));
		return distance;
	}
}
public class labwork06 {
	private static Scanner cin;
    public static void main(String[] args) {
    cin=new Scanner(System.in);
    Point p1=new Point();
    Point p2=new Point();
    Point p3=new Point();
    double x1, x2, x3, y1, y2, y3;
    System.out.println("Introduceti coordonatele pentru primul punct: ");
    System.out.println("x= ");
    x1=cin.nextDouble();
    System.out.println("y= ");
    y1=cin.nextDouble();
    p1.setX(x1);
    p1.setY(y1);
    System.out.println("Introduceti coordonatele pentru cel de-al doilea punct: ");
    System.out.println("x= ");
    x2=cin.nextDouble();
    System.out.println("y= ");
    y2=cin.nextDouble();
    p2.setX(x2);
    p2.setY(y2);
    System.out.println("Introduceti coordonatele pentru cel de-al treilea punct: ");
    System.out.println("x= ");
    x3=cin.nextDouble();
    System.out.println("y= ");
    y3=cin.nextDouble();
    p3.setX(x3);
    p3.setY(y3);
    double d12, d13, d23;
    d12=p1.getDistance(p2);
    d13=p1.getDistance(p3);
    d23=p2.getDistance(p3);
    try {
    	if((p1.getX()==p2.getX() && p1.getX()==p3.getX())||(p1.getY()==p2.getY() && p1.getY()==p3.getY()))
    		System.out.println("Punctele sunt pe aceeasi linie!");
    }catch(RuntimeException e) {
    	System.out.println("Punctele sunt pe aceeasi linie!");
    }
    if(((Math.pow(d12, 2)+Math.pow(d13, 2))<Math.pow(d23, 2))||((Math.pow(d12, 2)+Math.pow(d23, 2))<Math.pow(d13, 2))||((Math.pow(d13, 2)+Math.pow(d23, 2))<Math.pow(d12, 2)))
    		System.out.println("Triunghiul este obtuz!");
    		else 
    			if(((Math.pow(d12, 2)+Math.pow(d13, 2))>Math.pow(d23, 2))||((Math.pow(d12, 2)+Math.pow(d23, 2))>Math.pow(d13, 2))||((Math.pow(d13, 2)+Math.pow(d23, 2))>Math.pow(d12, 2)))
    				System.out.println("Triunghiul este ascutitunghic!");
    			else
    				if(((Math.pow(d12, 2)+Math.pow(d13, 2))==Math.pow(d23, 2))||((Math.pow(d12, 2)+Math.pow(d23, 2))==Math.pow(d13, 2))||((Math.pow(d13, 2)+Math.pow(d23, 2))==Math.pow(d12, 2)))
    					System.out.println("Triunghiul este dreptunghic!");
    }	
}
