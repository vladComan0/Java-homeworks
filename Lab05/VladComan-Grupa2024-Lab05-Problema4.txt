/* Consider the Fractie class that has two protected attributes a and b for the counter and denominator, two set () and
get () methods for each of the class attributes. Define an explicit constructor without parameters that initiates a with 0
and b with 1, and an explicit constructor with two parameters that can be called if it is checked whether a fraction can
be defined (b! = 0). Define a method simplifica () that simplifies and returns a Fractie object by calling an int cmmdc (int,
int) method that uses the modulo's algorithm specific for the class. Define an operation to add two Fractie objects,
which returns a Fractie object. Define a Fractie_ext class derived from Fractie, which will have a constructor with
parameters (which calls the constructor from the base class) and which will redefine the method simplifica() using an int
cmmdc (int, int) algorithm based on subtractions. Add a method for subtracting two fractions.
Instantiate two Fractie objects without parameters. Set the attributes of the data objects read from the keyboard.
Display the original attributes of the objects and the new defined attributes. Simplify, add and display results. Instantiate
two Fractie_ext objects with read data from the keyboard. Simplify, add and subtract objects and display results.
Make an upcast from Fractie_ext to Fractie and try to subtract the items. All operations will be realised in main()
method.
Vlad Coman, Group 2024
12.04.2020
*/
package Fractie;
import java.util.Scanner;
public class Main {
	private static Scanner cin;
	public static void main(String []args) {
	cin=new Scanner(System.in);
	int a, b;
	Fractie ob1=new Fractie();
	System.out.println("Introduceti valoarea numaratorului pentru prima fractie: ");
	a=cin.nextInt();
	ob1.setA(a);
	System.out.println("Introduceti valoarea numitorului pentru prima fractie: ");
	b=cin.nextInt();
	ob1.setB(b);
	Fractie ob2=new Fractie();
	System.out.println("Introduceti valoarea numaratorului pentru a doua fractie: ");
	a=cin.nextInt();
	ob2.setA(a);
	System.out.println("Introduceti valoarea numitorului pentru a doua fractie: ");
	b=cin.nextInt();
	ob2.setB(b);
	System.out.println("Valorile initiale ale fractiilor sunt: ");
	System.out.printf("Prima fractie: a=%d si b=%d",ob1.getA(),ob1.getB());
	System.out.printf("%n doua fractie: a=%d si b=%d",ob2.getA(),ob2.getB());
	System.out.println("Prima fractie simplificata este: "+ob1.simplify(ob1));
	System.out.println("A doua fractie simplificata este: "+ob2.simplify(ob2));
	Fractie sum=new Fractie();
	System.out.println("Suma celor doua fractii este: "+sum.addition(ob1, ob2));
	Fractie_ext ob3=new Fractie_ext(10,5);
	Fractie_ext ob4=new Fractie_ext(8,5);
	System.out.println("Prima fractie simplificata cu clasa derivata este: "+ob3.simplify(ob3));
	System.out.println("A doua fractie simplificata cu clasa derivata este: "+ob4.simplify(ob4));
	Fractie_ext sum2=new Fractie_ext();
	System.out.println("Suma celor doua fractii din clasa derivata este: "+sum2.addition(ob3, ob4));
	Fractie ob5=ob3;
	System.out.println("A 5-a fractie este(upcasting): "+ob5.getA()+" "+ob5.getB());
	}
}
package Fractie;
public class Fractie {
	protected int a, b;
	Fractie(){
	this.a=0;
	this.b=1;
	}
	Fractie(int a, int b){
		if(b!=0) {
			this.a=a;
			this.b=b;
		}
		else System.out.println("The value of b must be different than 0");
	}
	public void setA(int a) {
		this.a=a;
	}
	public int getA() {
		return a;
	}
	public void setB(int b) {
		if(b!=0)
			this.b=b;
		else System.out.println("The value of b must be different than 0");
	}
	public int getB() {
		return b;
	}
	public int gcd(int a, int b) {
		int c;
	    while (b!=0) {
	        c = a % b;
	        a = b;
	        b = c;
	    }
	    return a;
	}
	public Fractie simplify(Fractie ob1) {
		if(gcd(ob1.a, ob1.b)!=1) {
			ob1.a/=gcd(ob1.a,ob1.b);
			ob1.b/=gcd(ob1.a,ob1.b);
		}
		return ob1;
	}
	public Fractie addition(Fractie ob1, Fractie ob2) {
		Fractie sum=new Fractie();
		if(ob1.b==ob2.b) {
			sum.a=ob1.a+ob2.a;
			sum.b=ob1.b;
		}
		else {
			ob1.a*=ob2.b;
			ob2.a*=ob1.b;
			ob1.b*=ob2.b;
			ob2.b*=ob1.b;
			sum.a=ob1.a+ob2.a;
			sum.b=ob1.b;
		}
		return sum;
	}
}
package Fractie;

public class Fractie_ext extends Fractie{
	private int counter, denominator;
	Fractie_ext(int counter, int denominator){
		super(counter, denominator);
	}
	Fractie_ext(){
		this.setCounter(0);
		this.setDenominator(0);
	}
	public Fractie substraction(Fractie ob1, Fractie ob2) {
		Fractie diff=new Fractie();
		if(ob1.b==ob2.b) {
			diff.a=ob1.a-ob2.a;
			diff.b=ob1.b;
		}
		else {
			ob1.a*=ob2.b;
			ob2.a*=ob1.b;
			ob1.b*=ob2.b;
			ob2.b*=ob1.b;
			diff.a=ob1.a-ob2.a;
			diff.b=ob1.b;
		}
		return diff;
	}
	public int gcd(int a, int b) {
	    while (a!=b) {
	       if(a>b)
	    	   a-=b;
	       else b-=a;
	    }
	    return a;
	}
	public Fractie simplify(Fractie ob1) {
		if(gcd(ob1.a, ob1.b)!=1) {
			ob1.a/=gcd(ob1.a,ob1.b);
			ob1.b/=gcd(ob1.a,ob1.b);
		}
		return ob1;
	}
	public int getCounter() {
		return counter;
	}
	public void setCounter(int counter) {
		this.counter = counter;
	}
	public int getDenominator() {
		return denominator;
	}
	public void setDenominator(int denominator) {
		this.denominator = denominator;
	}
}