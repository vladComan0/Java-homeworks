/*. In this lab exercise you will develop a class hierarchy of shapes and write a program that computes the amount of
paint needed to paint different objects. The hierarchy will consist of a parent class Shape with three derived classes -
Sphere, Rectangle, and Cylinder. For the purposes of this exercise, the only attribute a shape will have is a name and the
method of interest will be one that computes the area of the shape (surface area in the case of three-dimensional
shapes). Do the following.
A. Write an abstract class Shape with the following members:
- an instance variable shapeName of String type
- an abstract method area()
- a toString() method that returns the name of the shape
B. The file Sphere.java contains the Sphere class which is a descendant of Shape. A sphere has a radius as a private
integer variable and implements the body of the inherited abstract method area().
C. Define similar classes for a rectangle and a cylinder. The classes Rectangle and Cylinder are also derived from the
Shape class. A rectangle is defined by its length and width. A cylinder is defined by a radius and height.
Note: Each of the derived classes override the toString method and define specific mutator and accessor methods.
D. The file Paint.java contains an interface that has a float constant paintPerSurfaceUnit.
E. The file PaintThings.java implements the Paint interface and contains a program that computes the amount of paint
needed to paint various shapes.
Instantiate the three shape objects: deck <- Rectangle, bigBall <- Sphere and tank <- Cylinder. Make the appropriate
method calls to assign each objectâ€™s specific attributes with data read from the keyboard.
Compute the amount of paint needed for covering each created shape.
Vlad Coman, Group 2024
12.04.2020
*/
package Shape;
import java.util.Scanner;
public class Main {
	private static Scanner cin;
	public static void main(String []args) {
	cin=new Scanner(System.in);
	Cube deck=new Cube();
	Sphere bigBall=new Sphere();
	Cylinder tank=new Cylinder();
	int sradius, length, height, cradius;
	System.out.println("Introduceti valoarea pentru raza sferei: ");
	sradius=cin.nextInt();
	System.out.println("Introduceti valoarea pentru latura cubului: ");
	length=cin.nextInt();
	System.out.println("Introduceti valoarea pentru inaltimea cilindrului: ");
	height=cin.nextInt();
	System.out.println("Introduceti valoarea pentru raza cilindrului: ");
	cradius=cin.nextInt();
	deck.setA(length);
	deck.setName("Cub");
	bigBall.setRadius(sradius);
	bigBall.setName("Sfera");
	tank.setHeight(height);
	tank.setRadius(cradius);
	tank.setName("Cilindrul");
	System.out.println("Cantitatea de vopsea necesara pentru a vopsi: ");
	PaintThings ob1=new PaintThings();
	System.out.println("Cubul: "+ob1.quantityc(deck));
	System.out.println("Sfera: "+ob1.quantitys(bigBall));
	System.out.println("Cilindrul: "+ob1.quantitycy(tank));
	}
}
package Shape;
public abstract class Figure {
	private String name;
	abstract double area();
	Figure(String name){
		this.name=name;
	}
	Figure(){
		this.name=null;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String toString() {
		return name;
	}
}
package Shape;
public class Sphere extends Figure{
	private int radius;
	Sphere(int radius){
		this.radius=radius;
	}
	Sphere(){
		this.radius=0;
	}
	public int getRadius() {
		return radius;
	}
	public void setRadius(int radius) {
		this.radius = radius;
	}
	@Override
	double area() {
		return 4*Math.PI*Math.pow(radius, 2);
	}
	
}
package Shape;
public class Cube extends Figure{
	private int a;
	Cube(int a){
		this.setA(a);
	}
	Cube(){
		this.setA(0);
	}
	public int getA() {
		return a;
	}
	public void setA(int a) {
		this.a = a;
	}
	@Override
	double area() {
		return 8*Math.pow(a, 2);
	}
	
}
package Shape;
public class Cylinder extends Figure{
	private int height;
	private int radius;
	Cylinder(int height, int radius){
		this.setHeight(height);
		this.setRadius(radius);
	}
	Cylinder(){
		this.setHeight(0);
		this.setRadius(0);
	}
	public int getHeight() {
		return height;
	}
	public void setHeight(int height) {
		this.height = height;
	}
	public int getRadius() {
		return radius;
	}
	public void setRadius(int radius) {
		this.radius = radius;
	}
	@Override
	double area() {
		return 2*Math.PI*Math.pow(radius, 2)+2*Math.PI*height*radius;
	}	
}
package Shape;
public interface Paint {
	public static final float paintPerSurfaceUnit = 5;
}
package Shape;
public class PaintThings implements Paint{
	double quantityc(Cube s){
		return paintPerSurfaceUnit*s.area();
	}
	double quantitys(Sphere s){
		return paintPerSurfaceUnit*s.area();
	}
	double quantitycy(Cylinder s){
		return paintPerSurfaceUnit*s.area();
	}
}
